(this["webpackJsonpcopoly-calc-react"]=this["webpackJsonpcopoly-calc-react"]||[]).push([[0],{22:function(e,t,r){},23:function(e,t,r){},25:function(e,t,r){},26:function(e,t,r){"use strict";r.r(t);var n=r(2),o=r.n(n),a=r(12),s=r.n(a),c=(r(22),r(23),r(0));function i(){return Object(c.jsxs)("section",{className:"welcome_banner",children:[Object(c.jsx)("h1",{children:"Copoly-Calc"}),Object(c.jsxs)("p",{children:["Welcome to Copoly-Calc!",Object(c.jsx)("br",{}),"Copoly-Calc (name not final) is a work-in-progress web application designed to perform copolymerization calculations with minimal user input.",Object(c.jsx)("br",{}),"'Minimal user input' requires that:"]}),Object(c.jsxs)("section",{className:"explanation",children:[Object(c.jsx)("h3",{children:"For both Functional Groups"}),Object(c.jsxs)("ol",{children:[Object(c.jsx)("li",{children:"A unique name must be given"}),Object(c.jsx)("li",{children:"Number of comonomers must be given"}),Object(c.jsx)("li",{children:"Molar mass for all comonomers must be given"}),Object(c.jsx)("li",{children:"A percent type (weight or mole) must be chosen"}),Object(c.jsx)("li",{children:"There can only be up to one unknown comonomer (neither mass nor percent being given) for each group"})]}),Object(c.jsx)("h3",{children:"For Reference Group"}),Object(c.jsxs)("ol",{children:[Object(c.jsx)("li",{children:"At least one comonomer's mass must be given"}),Object(c.jsxs)("li",{children:["The number of values given for mass and percent combined must be greater than or equal to ",Object(c.jsx)("em",{children:"n"})]})]}),Object(c.jsx)("h3",{children:"For Complimentary Group"}),Object(c.jsx)("ol",{children:Object(c.jsxs)("li",{children:["The number of values given for mass and percent combined must be greater than or equal to ",Object(c.jsx)("em",{children:"n - 1"})]})}),Object(c.jsxs)("aside",{children:[Object(c.jsx)("em",{children:"n"})," - Number of comonomers given for an individual functional group."]})]})]})}var l=r(1),u=r(5),m=r(3),f="UPDATE_FUNC",g="UPDATE_MONOMERS",h="INITIALIZE_MONOMERS",v="FUNC_FORM",d="MONOMER_FORM",p="FINAL_RESULTS",M={funcA_name:"",funcA_num:"",funcB_name:"",funcB_num:"",func_xs:"",xsGroup:"",isExcessEQ:!1},b=o.a.createContext(null),j=o.a.createContext(null),O=function(){return Object(n.useContext)(b)},x=function(){return Object(n.useContext)(j)};function _(e,t){var r=t.formType,n=t.formField,o=t.value;switch(r){case v:var a=Object(m.a)(Object(m.a)({},e.funcGroupsForm),{},Object(u.a)({},n,o));return Object(m.a)(Object(m.a)({},e),{},{funcGroupsForm:a});case h:if(void 0===e.monomersForm)return e.monomersForm=o,e;var s=e.monomersForm;for(var c in s){var i=s[c];void 0!==o[c]&&(o[c]=i)}return Object(m.a)(Object(m.a)({},e),{},{monomersForm:o});case d:var l=Object(m.a)(Object(m.a)({},e.monomersForm),{},Object(u.a)({},n,o));return Object(m.a)(Object(m.a)({},e),{},{monomersForm:l});default:throw Error("Invalid form type: ",r)}}function P(e,t){var r=t.type,n=t.funcGroups;switch(r){case f:return n;case g:var o=n.monomers,a=Object(l.a)(e,2),s=a[0],c=a[1],i=Object(l.a)(o,2),u=i[0],m=i[1];return s.setMonomers(u),c.setMonomers(m),[s,c];default:throw Error("Invalid action: ",r)}}function E(e,t){var r=t.page;if(e!==r)switch(r){case v:case d:case p:return r;default:throw Error("Invalid page: ",r)}return e}var y=[];function w(e){var t=e.children,r=Object(n.useReducer)(_,{funcGroupsForm:M}),o=Object(l.a)(r,2),a=o[0],s=o[1],i=Object(n.useReducer)(P,y),u=Object(l.a)(i,2),m=u[0],f=u[1],g=Object(n.useReducer)(E,v),h=Object(l.a)(g,2),d=h[0],p=h[1];return Object(c.jsx)(b.Provider,{value:{formData:a,funcGroups:m,page:d},children:Object(c.jsx)(j.Provider,{value:{setFormData:s,setFuncGroup:f,setPage:p},children:t})})}var N=[{letter:"A",name_placeholder:"diester",num_placeholder:1},{letter:"B",name_placeholder:"diol",num_placeholder:2}],G={funcA_name:!0,funcA_num:!0,funcB_name:!0,funcB_num:!0,func_xs:!1,xsGroup:!1,isExcessEQ:!1},S=r(13),F="[INVALID]",R=1e-4;function T(e){try{return e.length>1?e.charAt(0).toUpperCase()+e.slice(1):1===e.length?e.charAt(0).toUpperCase():(console.log("Your input value of (".concat(e,") is not a string datatype. Its return value will be converted to a string.")),String(e))}catch(t){return console.error(t),F}}function C(e){var t,r={},n=Object(S.a)(e);try{for(n.s();!(t=n.n()).done;)for(var o=t.value,a=o.num,s=T(o.name),c=0;c<a;c++)r["mass".concat(s,"-").concat(c+1)]="",r["percent".concat(s,"-").concat(c+1)]="",r["molar_mass".concat(s,"-").concat(c+1)]=""}catch(i){n.e(i)}finally{n.f()}return r}var k=r(7),U=r(8),I=r(4),W=r(6),A=function(e,t,r){return new TypeError("Expected (".concat(e,") for ").concat(r,", received (").concat(t,")"))},L=function(e,t){return new Error("(".concat(t,') must be "').concat(e,'"'))};function q(e,t){var r=t.value;switch(e){case"index":var n;console.log("checking index value...");var o=t.value,a=t.index_end,s=o%1===0&&o>=0,c=o<=a;if(s&&c)n=!0;else if(!s&&c){var i=L("greater than or equal to 0","Index");console.error(i),n=!1}else if(s&&!c){var l=L("within bounds of array (0-".concat(a,")"),"Index");console.error(l),n=!1}else{var u=Error("Index must be a valid index value and within bounds of array (0-".concat(a,")"));console.error(u),n=!1}return n;case"int":var m;if(console.log("checking integer value..."),r<=0){var f=L("greater than 0","Integer");console.error(f),m=!1}else if(r>0&&r%1===0)m=!0;else{var g=A(e,typeof r,"integer value");console.error(g),m=!1}return m;case"string":var h;if(console.log("checking string value..."),""===r){var v=L("a non-blank string","Functional group name");console.error(v),h=!1}else if("string"===typeof r)h=!0;else{var d=A(e,typeof r,"Functional group name");console.error(d),h=!1}return h;case"float":console.log("checking float value...");var p,M=t.isMonomer;if(r<0){var b=L("greater than 0","Float");console.error(b),p=!1}else if(0===r&&M)p=!0;else if(r>0)p=!0;else{var j=A(e,typeof r,"float value");console.error(j),p=!1}return p;default:L("an integer, string, or float",e)}return!1}function Q(e,t,r){var n=q("float",{value:e}),o=q("float",{value:t});return q("float",{value:r})?n&&o?t>e-r&&t<e+r:!n&&o?(console.error(A("float",typeof e,"reference value")),!1):n&&!o?(console.error(A("float",typeof t,"comparison value")),!1):(console.error(A("float",typeof e,"reference value")),console.error(A("float",typeof t,"comparison value")),!1):(console.error(A("float",typeof r,"error tolerance")),!1)}var B={mass:0,percent:0,determined:0,partial:0},D=Object(W.a)("increment_monomer_stat_count"),Y=Object(W.a)("set_func_property"),Z=Object(k.a)((function e(t,r,n,o,a){var s=this,c=arguments.length>5&&void 0!==arguments[5]?arguments[5]:null;Object(U.a)(this,e),Object.defineProperty(this,Y,{value:K}),this.setIsReference=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return s.isReference=e,s.isReference},this.hasUnknown=function(){return null!==s.unknown},Object.defineProperty(this,D,{writable:!0,value:function(e){s.monomerStatCount[e]++}}),this.determineMonomerStatCount=function(){return s.monomerStatCount=Object(m.a)({},B),s.monomers.forEach((function(e){var t=e.massGiven(),r=e.weightPercentGiven()||e.molePercentGiven();(t&&Object(I.a)(s,D)[D]("mass"),r&&Object(I.a)(s,D)[D]("percent"),t&&r&&Object(I.a)(s,D)[D]("determined"),s.num>1)&&((t&&!r||!t&&r)&&Object(I.a)(s,D)[D]("partial"))})),s.monomerStatCount},this.findRefMonomer=function(){for(var e=0,t=!1;e<s.monomers.length&&!t;){var r=s.monomers[e];(t=r.massGiven()&&(r.weightPercentGiven()||r.molePercentGiven()))||e++}return t?s.monomers[e]:(console.error(Error("No reference monomer could be found for the ".concat(s.name," functional group."))),!1)},this.sumMonomerStat=function(e){return s.monomers.reduce((function(t,r){var n=r[e];return void 0!==n?t+=n:(console.error(Error("Cannot sum ".concat(e))),0)}),0)},this.getPercentType=function(){return s.percent_type},this.getName=function(){return s.name},this.getNum=function(){return s.num},this.getMolarEQ=function(){return s.molar_eq},this.getMonomers=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(null===e)return s.monomers;var t=q("index",{value:e,index_end:s.num-1});if(t)return s.monomers[e];console.error(Error("Index (".concat(e,") must be a valid index value and within bounds of monomers array (0-").concat(s.num-1,")")))},this.getIsReference=function(){return s.isReference},this.getUnknown=function(){return s.monomers[s.unknown]},this.getMonomerStatCount=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;switch(e){case null:return s.monomerStatCount;case"mass":case"percent":case"determined":case"partial":return s.monomerStatCount[e];default:return console.error(Error("'".concat(e,"' is not a valid monomerStatCount property selected"))),0}},this.setMonomers=function(e){return Object(I.a)(s,Y)[Y]("monomers","Array",e)},this.setUnknown=function(e){return Object(I.a)(s,Y)[Y]("unknown","number",e)},this.clearMonomers=function(){return s.monomers=[],s.monomers},this.percent_type=t,this.name=r,this.num=n,this.molar_eq=o,this.monomers=a,this.isReference=!1,this.unknown=c,this.monomerStatCount=Object(m.a)({},B)}));function K(e,t,r){if("monomers"===e){if(!(r instanceof Array))throw A(t,typeof r,e)}else if(typeof r!==t)throw A(t,typeof r,e);switch(e){case"monomers":var n=r.length;if(n<=0)throw L("Functional groups must have at least 1 monomer",e);if(n!==this.num)throw L("equivalent to the number of comonomers provided for ".concat(this.name," functional group (").concat(this.num,")\nInvalid value given: ").concat(r),e);break;case"unknown":if(!q("index",{value:r,index_end:this.num-1}))throw L("A functional group unknown must be an index value of type integer",r);break;default:throw Error("Invalid functional group property. Cannot update (".concat(e,")"))}this[e]=r}function X(){var e=O(),t=e.formData,r=e.funcGroups,n=x(),a=n.setFormData,s=n.setFuncGroup,i=n.setPage,l=function(e){var t=e.target,r=t.name,n=t.value;a({formType:v,formField:r,value:n})},u=function(){var e,n,o=t.funcGroupsForm,c=document.getElementById("wpercent").checked?"weight":"mole",i=o.funcA_name,l=o.funcB_name;if(e=i.toLowerCase(),n=l.toLowerCase(),e===n||e===n&&void console.error("There was a problem checking parity between var1: "+e+" and var2: "+n))console.error(L("unique","Functional group names"));else{var u="A"===o.xsGroup,m="B"===o.xsGroup,g=o.isExcessEQ;if(!g||(u||m)){var v=!0,d=N.map((function(e){var t=e.letter,r=o["func".concat(t,"_name")],n=parseInt(o["func".concat(t,"_num")]),a=g&&(u&&"A"===t||m&&"B"===t)?parseFloat(o.func_xs):1,s=q("string",{value:r}),i=q("int",{value:n}),l=q("float",{value:a,isMonomer:!1});if(s&&i&&l)return{data:new Z(c,r,n,a,[]),isOK:v};var f="One or multiple of the values given for Functional Group ".concat(t," is missing or invalid.");return console.error(f),{message:f,isOK:v=!1}}));console.log("Parsed funcGroups: ",d),console.log("Reducer State: ",r);var p=d.reduce((function(e,t){return t.isOK&&e.push(t.data),e}),[]);2===p.length?(s({type:f,funcGroups:p}),a({formType:h,formField:null,value:C(p)})):console.error(Error("One of the functional groups was given invalid input. Please try again."))}else console.error(L("selected if excess molar eq is selected","Excess functional group"))}};return o.a.useEffect((function(){var e=t.funcGroupsForm,n=t.monomersForm,o=void 0!==r&&r.length>0,a=void 0!==n,s=0;for(var c in e){var l=G[c],u=e[c];l&&""===u&&s++}o&&0===s&&a&&i({page:d})}),[t,r,i]),Object(c.jsx)("div",{className:"form_container",children:Object(c.jsxs)("form",{id:"initial_data_entry",children:[Object(c.jsxs)("section",{className:"percent_type",children:[Object(c.jsxs)("label",{children:["Weight %",Object(c.jsx)("input",{type:"radio",name:"proportion",value:"wpercent",id:"wpercent",className:"input_field",defaultChecked:!0})]}),Object(c.jsxs)("label",{children:["Mole %",Object(c.jsx)("input",{type:"radio",name:"proportion",value:"mpercent",id:"mpercent",className:"input_field"})]})]}),Object(c.jsx)("section",{className:"ag_box",children:N.map((function(e){var r=e.letter,n=e.name_placeholder,o=e.num_placeholder;return Object(c.jsxs)("div",{children:[Object(c.jsxs)("h1",{children:["Functional Group ",r]}),Object(c.jsx)("div",{className:"input_block",children:Object(c.jsxs)("label",{children:["Substituent Name",Object(c.jsx)("input",{type:"text",name:"func".concat(r,"_name"),value:t.funcGroupsForm["func".concat(r,"_name")],onChange:l,placeholder:"e.g. '".concat(n,"'"),id:"func".concat(r,"_name"),className:"input_field string"})]})}),Object(c.jsx)("br",{}),Object(c.jsxs)("div",{className:"input_block",children:[Object(c.jsxs)("label",{children:["Number of Comonomers",Object(c.jsx)("input",{type:"text",name:"func".concat(r,"_num"),value:t.funcGroupsForm["func".concat(r,"_num")],onChange:l,placeholder:"e.g. '".concat(o,"'"),id:"func".concat(r,"_num"),className:"input_field int"})]}),Object(c.jsx)("button",{type:"button",name:"minus",onClick:function(){return function(e){var r="func".concat(e,"_num"),n=parseInt(t.funcGroupsForm[r]);n>1&&n%1===0?a({formType:v,formField:r,value:n-1}):n>2&&n%1!==0?(n=Math.floor(n)-1,a({formType:v,formField:r,value:n})):a({formType:v,formField:r,value:1})}(r)},className:"square_button plus_minus",tabIndex:"-1",children:Object(c.jsx)("div",{children:"-"})}),Object(c.jsx)("button",{type:"button",name:"plus",onClick:function(){return function(e){var r="func".concat(e,"_num"),n=parseInt(t.funcGroupsForm[r]);n%1===0?a({formType:v,formField:r,value:n+1}):n%1>0?(n=Math.floor(n)+1,a({formType:v,formField:r,value:n})):a({formType:v,formField:r,value:1})}(r)},className:"square_button plus_minus",tabIndex:"-1",children:Object(c.jsx)("div",{children:"+"})})]}),Object(c.jsx)("br",{})]},"func_group_".concat(r))}))}),Object(c.jsx)("br",{}),Object(c.jsxs)("section",{className:"optional",children:[Object(c.jsx)("div",{className:"input_block",children:Object(c.jsxs)("label",{children:["Is either group in excess?",Object(c.jsx)("input",{type:"checkbox",name:"molar_eq_check",id:"molar_eq_check",onClick:function(e){var t=e.target;return a({formType:v,formField:"isExcessEQ",value:t.checked})},className:"check_box",tabIndex:"-1"})]})}),Object(c.jsx)("br",{}),t.funcGroupsForm.isExcessEQ?Object(c.jsx)("div",{id:"molar_eq_container",children:Object(c.jsxs)("div",{className:"input_block",children:[N.map((function(e){var r=e.letter;return Object(c.jsx)("div",{className:t.funcGroupsForm.xsGroup===r?"selected":"unselected",id:"func".concat(r,"_eq"),children:Object(c.jsx)("button",{type:"button",name:"xs_".concat(r),onClick:function(){return a({formType:v,formField:"xsGroup",value:t.funcGroupsForm.xsGroup===r?"":r})},className:"square_button inactive_button",children:r})},"func".concat(r,"_eq"))})),Object(c.jsxs)("label",{children:["Molar Equivalents",Object(c.jsx)("input",{type:"text",name:"func_xs",value:t.funcGroupsForm.func_xs,onChange:l,placeholder:"e.g. '1.1'",id:"func_xs",className:"input_field float"})]})]})}):""]}),Object(c.jsx)("div",{className:"submit_container",children:Object(c.jsx)("button",{type:"button",onClick:function(){return u()},id:"initial_submit",className:"submit_button",children:"Next"})})]})})}var H=typeof Number(),V=Object(W.a)("set_monomer_property"),J=Object(k.a)((function e(t,r,n,o,a){var s=this;Object(U.a)(this,e),Object.defineProperty(this,V,{value:z}),this.getMass=function(){return s.mass},this.getWeightPercent=function(){return s.wpercent},this.getMolePercent=function(){return s.mpercent},this.getMolarMass=function(){return s.molar_mass},this.getMoles=function(){return s.moles},this.setMass=function(e){return Object(I.a)(s,V)[V]("mass",H,e)},this.setWeightPercent=function(e){return Object(I.a)(s,V)[V]("wpercent",H,e)},this.setMolePercent=function(e){return Object(I.a)(s,V)[V]("mpercent",H,e)},this.setMolarMass=function(e){return Object(I.a)(s,V)[V]("molar_mass",H,e)},this.setMoles=function(e){return Object(I.a)(s,V)[V]("moles",H,e)},this.massGiven=function(){return s.mass>0},this.weightPercentGiven=function(){return s.wpercent>0},this.molePercentGiven=function(){return s.mpercent>0},this.display=function(e){var t=s[e];switch(e){case"mass":case"wpercent":case"mpercent":case"molar_mass":case"moles":var r={};if(t>=1e3)return r={notation:"scientific",maximumSignificantDigits:4},$(Intl.NumberFormat("en-US",r).format(t));if(t<1e3&&t>=100)r={maximumSignificantDigits:6};else if(t<100&&t>=10)r={maximumSignificantDigits:5};else if(t<10&&t>=1)r={maximumSignificantDigits:4};else if(t<1){return r={notation:"scientific",maximumSignificantDigits:4},$(Intl.NumberFormat("en-US",r).format(t))}return Intl.NumberFormat("en-US",r).format(t);default:var n=L("a valid property.","Selected monomer property");return console.error(n),F}},this.mass=t,this.wpercent=r,this.mpercent=n,this.molar_mass=o,this.moles=a}));function z(e,t,r){try{if(typeof r!==t)throw A(t,typeof r,e);if(r<0)throw L("greater than 0",e);return this[e]=r,this[e]}catch(n){console.error(n)}}function $(e){var t="".concat(String.fromCodePoint(215)," 10"),r=e.split("E"),n=Object(l.a)(r,2),o=n[0],a=n[1];return Object(c.jsxs)("span",{children:["".concat(o," ").concat(t),Object(c.jsx)("sup",{children:a})]})}function ee(e){var t,r,n=e.percent_type,o=e.num,a=e.isReference,s=e.unknown,c=e.monomerStatCount,i=c.mass,l=c.percent,u=c.determined,m=c.partial,f=i>=1,g=l>=1,h=l===o,v=i===o-1,d=l===o-1,p=u>=1&&null!==s&&m===o-2;a?(t=i+l>o,r=m===o&&f):(t=1===o?f:i+l>o-1,r=m===o-1&&f&&null!==s);if(a){if(i===o&&(1===o||!g))return console.log("Your calculation route for reference group is: All Mass"),"ALLMASSROUTE";if(r)switch(n){case"weight":return console.log("Your calculation route for reference group is: wt% Zipper"),"WTP_ZIPPERROUTE";case"mole":return console.log("Your calculation route for reference group is: ml% Zipper"),"MLP_ZIPPERROUTE";default:return!1}else{if(!t&&!p)return console.log("No calculation route could be found for your reference group.\n\tIt may be missing key information (mass) and/or not have enough information:\n\tNUMBER OF KNOWNS SHOULD BE GREATER THAN OR EQUAL TO NUMBER OF MONOMERS"),!1;switch(n){case"weight":return p?console.log("Your calculation route for reference group is: wt% Tetris via xs info"):console.log("Your calculation route for reference group is: Excess wt%"),"XS_WTPROUTE";case"mole":return p?console.log("Your calculation route for reference group is: ml% Tetris via xs info"):console.log("Your calculation route for reference group is: Excess ml%"),"XS_MLPROUTE";default:return!1}}}else{if((h||d)&&!f)return console.log("Your calculation route for complimentary group is: All Percent"),"ALLPERCENTROUTE";if(v&&!g)return console.log("Your calculation route for complimentary group is: Given Mass"),"GIVENMASSROUTE";if(r)switch(n){case"mole":return console.log("Your calculation route for complimentary group is: Mol Percent Zipper"),"MLP_ZIPPERROUTE";case"weight":return console.log("Your calculation route for complimentary group is: Wt Percent Zipper"),"WTP_ZIPPERROUTE";default:return!1}else{if(!t)return console.log("No calculation route could be found for your complimentary group.\n\tIt may not have enough information:\n\tNUMBER OF KNOWNS SHOULD BE GREATER THAN OR EQUAL TO (NUMBER OF MONOMERS - 1)"),!1;switch(n){case"mole":return console.log("Your calculation route for complimentary group is: Mol Percent Excess Info"),"MLP_XS_INFOROUTE";case"weight":return console.log("Your calculation route for complimentary group is: Wt Percent Excess Info"),"WTP_XS_INFOROUTE";default:return!1}}}}function te(e,t){switch(t){case"ALLMASSROUTE":return function(e){var t=e.sumMonomerStat("mass");e.getMonomers().forEach((function(e){var r=e.getMass()/t*100;e.setWeightPercent(r);var n=e.getMass()/e.getMolarMass();e.setMoles(n)}));var r=e.sumMonomerStat("moles");return e.getMonomers().forEach((function(e){var t=e.getMoles()/r*100;e.setMolePercent(t)})),!0}(e);case"WTP_ZIPPERROUTE":return function(e){var t=e.sumMonomerStat("mass"),r=e.sumMonomerStat("wpercent"),n=t/(100-r);e.getMonomers().forEach((function(e){if(!e.weightPercentGiven()&&e.massGiven()){var t=e.getMass()/n;e.setWeightPercent(t)}else if(e.weightPercentGiven()&&!e.massGiven()){var r=e.getWeightPercent()*n;e.setMass(r)}var o=e.getMass()/e.getMolarMass();e.setMoles(o)}));var o=e.sumMonomerStat("moles");return e.getMonomers().forEach((function(e){var t=e.getMoles()/o*100;e.setMolePercent(t)})),!0}(e);case"MLP_ZIPPERROUTE":return function(e){e.getMonomers().forEach((function(e){if(e.massGiven()){var t=e.getMass()/e.getMolarMass();e.setMoles(t)}}));var t=e.sumMonomerStat("moles"),r=e.sumMonomerStat("mpercent"),n=t/(100-r);e.getMonomers().forEach((function(e){if(!e.molePercentGiven()&&e.massGiven()){var t=e.getMoles()/n;e.setMolePercent(t)}else if(e.molePercentGiven()&&!e.massGiven()){var r=e.getMolePercent()*n,o=r*e.getMolarMass();e.setMoles(r),e.setMass(o)}}));var o=e.sumMonomerStat("mass");return e.getMonomers().forEach((function(e){var t=e.getMass()/o*100;e.setWeightPercent(t)})),!0}(e);case"XS_WTPROUTE":return function(e){var t=e.findRefMonomer();if(!t)return console.error(Error("Cannot proceed calculations for ".concat(e.getName()," because there was no reference monomer"))),!1;for(var r=t.getMass()/t.getWeightPercent(),n=0;n<e.getMonomers().length;n++){var o=e.getMonomers(n);if(o.massGiven()&&o.weightPercentGiven()){if(!Q(r,o.getMass()/o.getWeightPercent(),R))return console.error(Error("Mass/Percent ratios don't match the reference for ".concat(e.getName(),"..."))),!1}else if(!o.massGiven()&&o.weightPercentGiven()){var a=o.getWeightPercent()*r;o.setMass(a)}else if(o.massGiven()&&!o.weightPercentGiven()){var s=o.getMass()/r;o.setWeightPercent(s)}var c=o.getMass()/o.getMolarMass();o.setMoles(c)}if(e.hasUnknown()){var i=e.sumMonomerStat("wpercent"),l=e.getUnknown(),u=100-i,m=u*r,f=m/l.getMolarMass();l.setWeightPercent(u),l.setMass(m),l.setMoles(f)}var g=e.sumMonomerStat("moles");return e.getMonomers().forEach((function(e){var t=e.getMoles()/g*100;e.setMolePercent(t)})),!0}(e);case"XS_MLPROUTE":return function(e){var t=e.findRefMonomer();if(!t)return console.error(Error("Cannot proceed calculations for ".concat(e.getName()," because there was no reference monomer"))),!1;var r=t.getMass()/t.getMolarMass();t.setMoles(r);for(var n=t.getMoles()/t.getMolePercent(),o=0;o<e.getMonomers().length;o++){var a=e.getMonomers(o);if(a.massGiven()&&a.molePercentGiven()){var s=a.getMass()/a.getMolarMass();if(!Q(n,s/a.getMolePercent(),R))return console.error(Error("Moles/Percent ratios don't match the reference for ".concat(e.getName(),"..."))),!1;a.setMoles(s)}else if(!a.massGiven()&&a.molePercentGiven()){var c=a.getMolePercent()*n,i=c*a.getMolarMass();a.setMoles(c),a.setMass(i)}else if(a.massGiven()&&!a.molePercentGiven()){var l=a.getMass()/a.getMolarMass(),u=l/n;a.setMoles(l),a.setMolePercent(u)}}if(e.hasUnknown()){var m=e.sumMonomerStat("mpercent"),f=e.getUnknown(),g=100-m,h=g*n,v=h*f.getMolarMass();f.setMolePercent(g),f.setMoles(h),f.setMass(v)}var d=e.sumMonomerStat("mass");return e.getMonomers().forEach((function(e){var t=e.getMass()/d*100;e.setWeightPercent(t)})),!0}(e);default:return!1}}function re(e,t,r){switch(r){case"ALLPERCENTROUTE":return function(e,t){if(t.getNum()>1&&t.hasUnknown()){var r=t.getUnknown();switch(t.getPercentType()){case"weight":var n=100-t.sumMonomerStat("wpercent");r.setWeightPercent(n);break;case"mole":var o=100-t.sumMonomerStat("mpercent");r.setMolePercent(o)}}if(t.getNum()>1&&"weight"===t.getPercentType()){var a=0,s=[];t.getMonomers().forEach((function(e){var t=e.getWeightPercent()/e.getMolarMass();s.push(t),a+=t})),t.getMonomers().forEach((function(e,t){var r=s[t]/a*100;e.setMolePercent(r)}))}var c=e.sumMonomerStat("moles")/e.getMolarEQ()*t.getMolarEQ();if(t.getMonomers().forEach((function(e){var t=c*(e.getMolePercent()/100),r=t*e.getMolarMass();e.setMoles(t),e.setMass(r)})),"mole"===t.getPercentType()){var i=t.sumMonomerStat("mass");t.getMonomers().forEach((function(e){var t=e.getMass()/i*100;e.setWeightPercent(t)}))}return!0}(e,t);case"GIVENMASSROUTE":return function(e,t){var r=e.sumMonomerStat("moles")/e.getMolarEQ()*t.getMolarEQ(),n=0,o=0;if(t.getMonomers().forEach((function(e){if(e.massGiven()){var t=e.getMass()/e.getMolarMass(),a=t/r*100;e.setMoles(t),e.setMolePercent(a),n+=t,o+=a}})),n>=r)return console.error(Error("The partial mole sum (".concat(n," mol) for the complimentary (").concat(t.getName(),") group is greater than or equal to expected mole sum (").concat(r," mol). \n            \nPlease enter valid masses or remove invalid ones."))),!1;var a=t.getUnknown(),s=100-o,c=s/100*r,i=c*a.getMolarMass();a.setMolePercent(s),a.setMoles(c),a.setMass(i);var l=t.sumMonomerStat("mass");return t.getMonomers().forEach((function(e){var t=e.getMass()/l*100;e.setWeightPercent(t)})),!0}(e,t);case"MLP_ZIPPERROUTE":return function(e,t){var r=e.sumMonomerStat("moles")/e.getMolarEQ()*t.getMolarEQ(),n=0,o=0;if(t.getMonomers().forEach((function(e){if(e.molePercentGiven()){var t=r*(e.getMolePercent()/100),a=t*e.getMolarMass();o+=t,e.setMoles(t),e.setMass(a)}else if(e.massGiven()){var s=e.getMass()/e.getMolarMass(),c=s/r*100;o+=s,e.setMoles(s),e.setMolePercent(c)}n+=e.getMolePercent()})),!(o<r))return console.error(Error("Partial mole sum exceeded the expected mole sum for the complimentary (".concat(t.getName(),") group. \n            \nPlease enter valid masses or remove invalid ones."))),!1;if(!(n<100))return console.error(Error("Calculated sum of all mole percents (".concat(n,"%) exceeded 100% for the complimentary (").concat(t.getName(),") group. \n            \nPlease enter valid masses/percents or remove invalid ones."))),!1;var a=t.getUnknown(),s=100-n,c=s/100*r,i=c*a.getMolarMass();if(!Q(r,o+=c,R))return console.error(Error("Calculated mole sum exceeded the expected mole sum for the complimentary (".concat(t.getName(),") group. \n            \nPlease enter valid masses or remove invalid ones."))),!1;a.setMolePercent(s),a.setMoles(c),a.setMass(i);var l=t.sumMonomerStat("mass");return t.getMonomers().forEach((function(e){var t=e.getMass()/l*100;e.setWeightPercent(t)})),!0}(e,t);case"WTP_ZIPPERROUTE":return function(e,t){for(var r=e.sumMonomerStat("moles")/e.getMolarEQ()*t.getMolarEQ(),n=0,o=r,a=0,s=0,c=t.getUnknown(),i=0;i<t.getMonomers().length;i++){var l=t.getMonomers(i);if(l.massGiven()){var u=l.getMass()/l.getMolarMass(),m=u/r*100;if(a+=l.getMass()/c.getMolarMass(),(o-=u)<=0)return console.error(Error("Calculated moles from given masses are invalid for the complimentary (".concat(t.getName(),") group. \n                    \nPlease enter valid masses or remove invalid ones."))),!1;l.setMoles(u),l.setMolePercent(m)}else if(l.weightPercentGiven()){s+=l.getWeightPercent()/100/l.getMolarMass(),n+=l.getWeightPercent()}}var f=s+(100-n)/100/c.getMolarMass(),g=(o+a)/f,h=o,v=0;if(t.getMonomers().forEach((function(e){if(e.massGiven()){var t=e.getMass()/g*100;n+=t,e.setWeightPercent(t)}else if(e.weightPercentGiven()){var o=e.getWeightPercent()/100*g,a=o/e.getMolarMass(),s=a/r*100;h+=a,e.setMass(o),e.setMoles(a),e.setMolePercent(s)}v+=e.getMass()})),!(g>v))return console.error(Error("Calculated mass sum (".concat(v," g) exceeded or equaled the expected mass sum (").concat(g," g) for the complimentary (").concat(t.getName(),") group. \n            \nPlease enter valid masses or remove invalid ones."))),!1;if(!(r>h))return console.error(Error("Calculated mole sum (".concat(h," mol) exceeded or equaled the expected mole sum (").concat(r," mol) for the complimentary (").concat(t.getName(),") group. \n            \nPlease enter valid masses or remove invalid ones."))),!1;if(!(n<100))return console.error(Error("Calculated sum of all mole percents (".concat(n,"%) exceeded 100 for the complimentary (").concat(t.getName(),") group. \n            \nPlease enter valid masses or remove invalid ones."))),!1;var d=100-n,p=d/100*g,M=p/c.getMolarMass(),b=M/r*100;return c.setWeightPercent(d),c.setMass(p),c.setMoles(M),c.setMolePercent(b),!0}(e,t);case"MLP_XS_INFOROUTE":return function(e,t){var r=e.sumMonomerStat("moles")/e.getMolarEQ()*t.getMolarEQ(),n=ne(t,r),o=n.calc_complete,a=n.calc_failed;if(a)return!1;if(o&&!a)return!0;var s=t.getMonomers().filter((function(e){return e.massGiven()&&e.molePercentGiven()}));if(s.length>=1){for(var c=0;c<s.length;c++){var i=s[c];if(!Q(i.getMoles()/r,i.getMolePercent(),R))return console.error(Error("The given mole percents do not match the expected mole percent for the complimentary (".concat(t.getName(),") group. \n                    \nPlease enter valid masses or remove invalid ones."))),!1}for(var u=Object(l.a)(s,1)[0],m=u.getMoles()/u.getMolePercent(),f=0;f<s.length;f++){var g=s[f],h=g.getMoles()/g.getMolePercent();if(!Q(m,h,R))return console.error(Error("The ratios between calculated moles and percents did not all match for the complimentary (".concat(t.getName(),") group. \n                    \nPlease enter valid masses or remove invalid ones."))),!1}if(s.length<t.getNum()&&t.getMonomers().forEach((function(e){if(e.massGiven()&&!e.molePercentGiven()){var t=e.getMoles()/m;e.setMolePercent(t)}else if(!e.massGiven()&&e.molePercentGiven()){var r=e.getMolePercent()*m,n=r*e.getMolarMass();e.setMoles(r),e.setMass(n)}})),t.hasUnknown()){var v=t.getUnknown(),d=t.sumMonomerStat("mpercent");if(d>=100)return console.error(Error("Calculated sum of all mole percents (".concat(d,"%) exceeded 100 for the complimentary (").concat(t.getName(),") group. \n                    \nPlease enter valid masses or remove invalid ones."))),!1;var p=100-d,M=p*m,b=M*v.getMolarMass();v.setMolePercent(p),v.setMoles(M),v.setMass(b)}var j=t.sumMonomerStat("mass");return t.getMonomers().forEach((function(e){var t=e.getMass()/j*100;e.setWeightPercent(t)})),!0}var O=t.sumMonomerStat("mpercent"),x=t.sumMonomerStat("moles")/(100-O);return t.getMonomers().forEach((function(e){if(!e.molePercentGiven()&&e.massGiven()){var t=e.getMoles()/x;e.setMolePercent(t)}if(e.molePercentGiven()&&!e.massGiven()){var r=e.getMolePercent()*x,n=r*e.getMolarMass();e.setMoles(r),e.setMass(n)}})),!!Q(r,t.sumMonomerStat("moles"),R)||(console.error(Error("The masses given did not match the calculated mole sum for the complimentary (".concat(t.getName(),") group. \n                \nPlease enter valid masses or remove invalid ones."))),!1)}(e,t);case"WTP_XS_INFOROUTE":return function(e,t){var r=e.sumMonomerStat("moles")/e.getMolarEQ()*t.getMolarEQ(),n=ne(t,r),o=n.calc_complete,a=n.calc_failed;if(a)return!1;if(o&&!a)return!0;var s=t.getMonomers().filter((function(e){return e.massGiven()&&e.weightPercentGiven()}));if(s.length>=1){for(var c=Object(l.a)(s,1)[0],i=c.getMass()/c.getWeightPercent(),u=0;u<s.length;u++){var m=s[u],f=m.getMass()/m.getWeightPercent();if(!Q(i,f,R))return console.error(Error("The given weight percents do not match the expected weight ratio for the complimentary (".concat(t.getName(),") group. \n                    \nPlease enter valid masses or remove invalid ones."))),!1}if(s.length<t.getNum()&&t.getMonomers().forEach((function(e){if(e.massGiven()&&!e.weightPercentGiven()){var t=e.getMass()/i;e.setWeightPercent(t)}else if(!e.massGiven()&&e.weightPercentGiven()){var r=e.getWeightPercent()*i,n=r/e.getMolarMass();e.setMass(r),e.setMoles(n)}})),t.hasUnknown()){var g=t.getUnknown(),h=t.sumMonomerStat("wpercent");if(h>=100)return console.error(Error("Calculated sum of all weight percents (".concat(h,"%) exceeded 100 for the complimentary (").concat(t.getName(),") group. \n                    \nPlease enter valid masses or remove invalid ones."))),!1;var v=100-h,d=v*i,p=d/g.getMolarMass();g.setWeightPercent(v),g.setMass(d),g.setMoles(p)}return t.getMonomers().forEach((function(e){var t=e.getMoles()/r*100;e.setMolePercent(t)})),!0}var M=t.sumMonomerStat("wpercent"),b=t.sumMonomerStat("mass")/(100-M);t.getMonomers().forEach((function(e){if(!e.weightPercentGiven()&&e.massGiven()){var t=e.getMass()/b;e.setWeightPercent(t)}else if(e.weightPercentGiven()&&!e.massGiven()){var r=e.getWeightPercent()*b,n=r/e.getMolarMass();e.setMass(r),e.setMoles(n)}}));var j=t.sumMonomerStat("moles");return!!Q(r,j,R)||(console.error(Error("The masses given did not match the calculated mole sum for the complimentary (".concat(t.getName(),") group. \n                \nPlease enter valid masses or remove invalid ones."))),!1)}(e,t);default:return!1}}function ne(e,t){var r=0,n=e.getMonomerStatCount("mass")===e.getNum(),o=0===e.getMonomerStatCount("percent");if(e.getMonomers().forEach((function(e){if(e.massGiven()){var t=e.getMass()/e.getMolarMass();r+=t,e.setMoles(t)}})),n){if(!Q(t,r,R))return console.error(Error("Calculated mole sum exceeded the expected mole sum for the complimentary (".concat(e.getName(),") group. \n                \nPlease enter valid masses or remove invalid ones."))),{calc_complete:!1,calc_failed:!0}}else if(!(t>r))return console.error(Error("Calculated mole sum must be less than the expected mole sum for the complimentary (".concat(e.getName(),") group. \n                \nPlease enter valid masses or remove invalid ones."))),{calc_complete:!1,calc_failed:!0};if(1===e.getNum())return{calc_complete:!0,calc_failed:!1};if(n&&o){var a=e.sumMonomerStat("mass");return e.getMonomers().forEach((function(e){var r=e.getMass()/a*100,n=e.getMoles()/t*100;e.setWeightPercent(r),e.setMolePercent(n)})),{calc_complete:!0,calc_failed:!1}}return{calc_complete:!1,calc_failed:!1}}function oe(){var e=O(),t=e.formData,r=e.funcGroups,n=x(),a=n.setFormData,s=n.setFuncGroup,i=n.setPage,u=function(e){var t=e.target,r=t.name,n=t.value;a({formType:d,formField:r,value:n})};o.a.useEffect((function(){if(r.length>0){var e=Object(l.a)(r,2),t=e[0],n=e[1];if(t.monomers.length>0&&n.monomers.length>0){var o=function(e){var t=Object(l.a)(e,2),r=t[0],n=t[1],o=r.determineMonomerStatCount(),a=n.determineMonomerStatCount(),s=o.mass,c=o.percent,i=a.mass,u=a.percent,m=s>=1&&s+c>=r.getNum(),f=i>=1&&i+u>=n.getNum();if(m&&!f)r.setIsReference();else if(!m&&f)n.setIsReference();else{if(!m||!f)return!1;var g=s+c-r.getNum(),h=i+u-n.getNum(),v=s-r.getNum(),d=i-n.getNum();g>h||v>d?r.setIsReference():h>g||d>v?n.setIsReference():r.setIsReference()}var p=ee(r),M=ee(n);return p||M?!p&&M?(console.error(Error("No valid calculation route for functional group for ".concat(n.getName(),"."))),!1):p&&!M?(console.error(Error("No valid calculation route for functional group for ".concat(r.getName(),"."))),!1):[p,M]:(console.error(Error("Neither functional group ".concat(r.getName()," or ").concat(n.getName()," have a valid calculation route."))),!1)}(r);if(o){var a=Object(l.a)(o,2),s=a[0],c=a[1];if(t.isReference){if(te(t,s))re(t,n,c)&&i({page:p})}else if(n.isReference){if(te(n,c))re(n,t,s)&&i({page:p})}else console.error(Error("No valid reference group"))}else console.error(Error("There was a problem finding one of the calculation routes"))}}else i({page:v})}),[r,i]);return Object(c.jsx)("div",{className:"form_container",children:Object(c.jsxs)("div",{id:"monomer_data_entry",className:"dynamic_form",children:[r.map((function(e){var r=e.name,n=e.num,o=e.percent_type,a=T(r);return Object(c.jsxs)("form",{name:"".concat(r,"_entry"),id:"".concat(r,"_entry"),children:[Object(c.jsxs)("h2",{className:"dyn_heading",children:[a," Group"]}),Object(c.jsxs)("section",{className:"ag_box",children:[Object(c.jsxs)("h3",{className:"ag_box_dyn_heading",children:[a," Group"]}),Array.from({length:n},(function(e,s){return Object(c.jsxs)("div",{children:[Object(c.jsx)("label",{htmlFor:"mass".concat(a,"-").concat(s+1),children:"Mass (g)"}),Object(c.jsx)("input",{type:"text",name:"mass".concat(a,"-").concat(s+1),value:t.monomersForm["mass".concat(a,"-").concat(s+1)],onChange:u,className:"dyn_input_field"}),Object(c.jsx)("label",{htmlFor:"percent".concat(a,"-").concat(s+1),children:"".concat(T(o)," Percent (%)")}),Object(c.jsx)("input",{type:"text",name:"percent".concat(a,"-").concat(s+1),disabled:1===n,placeholder:1===n?"100":"",value:1===n?"100":t.monomersForm["percent".concat(a,"-").concat(s+1)],onChange:u,className:"dyn_input_field"}),Object(c.jsx)("label",{htmlFor:"molar_mass".concat(a,"-").concat(s+1),children:"Molar Mass (g/mol)"}),Object(c.jsx)("input",{type:"text",name:"molar_mass".concat(a,"-").concat(s+1),value:t.monomersForm["molar_mass".concat(a,"-").concat(s+1)],onChange:u,className:"dyn_input_field"}),Object(c.jsx)("br",{})]},"".concat(r,"-").concat(s+1))}))]})]},"".concat(r,"_entry"))})),Object(c.jsxs)("div",{id:"monomer_submit_container",className:"submit_container",children:[Object(c.jsx)("button",{type:"button",onClick:function(){s({type:f,funcGroups:[]})},className:"back_button",children:"Back"}),Object(c.jsx)("button",{type:"button",onClick:function(){return function(){var e=r.map((function(e,n){for(var o=e.name,a=e.num,s=e.percent_type,c=[],i=T(o),l=[0,0],u=!0,m=0,f=0,g=0;g<a;g++){var h="".concat(i,"-").concat(g+1),v=t.monomersForm,d=v["mass".concat(h)],p=v["percent".concat(h)],M=v["molar_mass".concat(h)],b=""===d?0:parseFloat(d),j=""===p?0:parseFloat(p),O=""===M?0:parseFloat(M),x=q("float",{value:b,isMonomer:!0}),_=q("float",{value:j,isMonomer:!0}),P=q("float",{value:O,isMonomer:!0}),E=_&&"weight"===s?1===a?100:j:1===a?100:0,y=_&&"mole"===s?1===a?100:j:1===a?100:0;f+="weight"===s?E:y,(E>0||y>0)&&m++;var w=m===a?Q(100,f,R):f<100;if(0===b&&0===E&&0===y&&(l[n]+=1,r[n].setUnknown(g),l[n]>1&&(console.error(L("less than or equal to 1","Unknowns")),u=!1)),!O>0&&(console.error(L("greater than 0","Molar Mass")),u=!1),x&&_&&w&&P){var N=new J(b,E,y,O,0);c.push({data:N,isOK:u})}else{var G="One or multiple of the values given for the ".concat(h," monomer is missing or invalid.");console.error(G),u=!1,c.push({message:G,isOK:u})}}return c}));console.log("Parsed funcGroups: ",e),console.log("Reducer State: ",r);var n=function(e){return e.reduce((function(e,t){return t.isOK&&e.push(t.data),e}),[])},o=Object(l.a)(e,2),a=o[0],c=o[1],i=n(a),u=n(c),m=[i,u],f=Object(l.a)(r,2),h=f[0],v=f[1],d=i.length===h.getNum(),p=u.length===v.getNum();d&&p?s({type:g,funcGroups:{monomers:m}}):d?console.error(Error("One of the monomers for Functional Group A was given invalid input. Please try again.")):p?console.error(Error("One of the monomers for Functional Group B was given invalid input. Please try again.")):console.error(Error("One of the monomers was given invalid input. Please try again."))}()},className:"submit_button",children:"Next"})]})]})})}function ae(){var e=O().funcGroups,t=x(),r=t.setFuncGroup,n=t.setPage;o.a.useEffect((function(){var t=Object(l.a)(e,2),r=t[0],o=t[1],a=0===r.getMonomers().length,s=0===o.getMonomers().length;a&&s&&n({page:d})}),[e,n]);return Object(c.jsxs)("div",{className:"form_container",children:[Object(c.jsx)("div",{className:"final_results",children:e.map((function(e){var t=e.name,r=e.monomers;return Object(c.jsxs)("section",{id:"".concat(t,"_results"),className:"dynamic_form",children:[Object(c.jsxs)("h2",{className:"group_heading",children:[T(t)," Heading"]}),Object(c.jsx)("section",{className:"ag_box",children:Object(c.jsxs)("table",{className:"final_results",children:[Object(c.jsx)("thead",{children:Object(c.jsxs)("tr",{children:[Object(c.jsx)("th",{id:"".concat(t,"_th"),children:"Monomer"}),Object(c.jsx)("th",{id:"".concat(t,"_mass"),children:"Mass (g)"}),Object(c.jsx)("th",{id:"".concat(t,"_wpercent"),children:"Weight Percent (%)"}),Object(c.jsx)("th",{id:"".concat(t,"_mpercent"),children:"Mole Percent (%)"}),Object(c.jsx)("th",{id:"".concat(t,"_molar_mass"),children:"Molar Mass (g/mol)"}),Object(c.jsx)("th",{id:"".concat(t,"_moles"),children:"Moles (mol)"})]})}),Object(c.jsx)("tbody",{children:r.map((function(e,r){return Object(c.jsxs)("tr",{className:"monomer_row",children:[Object(c.jsx)("td",{children:"".concat(T(t)," ").concat(r+1)}),Object(c.jsx)("td",{children:e.display("mass")}),Object(c.jsx)("td",{children:e.display("wpercent")}),Object(c.jsx)("td",{children:e.display("mpercent")}),Object(c.jsx)("td",{children:e.display("molar_mass")}),Object(c.jsx)("td",{children:e.display("moles")})]},"".concat(t,"_row").concat(r))}))})]})})]},"".concat(t,"_results"))}))}),Object(c.jsx)("div",{id:"monomer_submit_container",className:"submit_container",children:Object(c.jsx)("button",{type:"button",onClick:function(){var t=Object(l.a)(e,2),n=t[0],o=t[1];n.clearMonomers(),o.clearMonomers(),r({type:f,funcGroups:[n,o]})},className:"back_button",children:"Back"})})]})}var se=function(e){switch(e){case v:return Object(c.jsx)(X,{});case d:return Object(c.jsx)(oe,{});case p:return Object(c.jsx)(ae,{});default:throw Error("Invalid page: ",e)}};function ce(){var e=O().page;return Object(c.jsxs)("main",{children:[Object(c.jsx)(i,{}),se(e)]})}r(25);var ie=function(){return Object(c.jsx)(w,{children:Object(c.jsx)(ce,{})})};s.a.createRoot(document.getElementById("root")).render(Object(c.jsx)(o.a.StrictMode,{children:Object(c.jsx)(ie,{})}))}},[[26,1,2]]]);
//# sourceMappingURL=main.b8f1558c.chunk.js.map