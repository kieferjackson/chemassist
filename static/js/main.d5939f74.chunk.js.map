{"version":3,"sources":["components/WelcomeBanner.js","components/forms/FuncGroupForm.js","pages/Main.js","App.js","index.js"],"names":["WelcomeBanner","className","FuncGroupForm","func_groups","letter","name_placeholder","num_placeholder","useState","funcA_name","funcA_num","funcA_molar_eq","funcB_name","funcB_num","funcB_molar_eq","funcGroupsForm","setFuncGroupsForm","handleFormChange","event","target","name","value","toggleMolarEQ","preventDefault","molar_eq_container","parentElement","molar_eq_status","id","document","getElementById","console","log","type","defaultChecked","map","onChange","placeholder","onClick","func_letter","num_field_name","current_value","parseInt","Math","floor","subtractMonomerNum","tabIndex","addMonomerNum","check_box","molar_eq_section","current_state","classList","remove","add","Main","App","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.d5939f74.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function WelcomeBanner()\r\n{\r\n    return (\r\n        <section className=\"welcome_banner\">\r\n            <h1>Copoly-Calc</h1>\r\n            <p>\r\n                Welcome to Copoly-Calc!<br />\r\n                Copoly-Calc (name not final) is a work-in-progress web application designed to perform copolymerization calculations with minimal user input.<br />\r\n                'Minimal user input' requires that:\r\n            </p>\r\n            <section className=\"explanation\">\r\n                <h3>For both Functional Groups</h3>\r\n                <ol>\r\n                    <li>A unique name must be given</li>\r\n                    <li>Number of comonomers must be given</li>\r\n                    <li>Molar mass for all comonomers must be given</li>\r\n                    <li>A percent type (weight or mole) must be chosen</li>\r\n                    <li>There can only be up to one unknown comonomer (neither mass nor percent being given) for each group</li>\r\n                </ol>\r\n        \r\n                <h3>For Reference Group</h3>\r\n                <ol>\r\n                    <li>At least one comonomer's mass must be given</li>\r\n                    <li>The number of values given for mass and percent combined must be greater than or equal to <em>n</em></li>\r\n                </ol>\r\n        \r\n                <h3>For Complimentary Group</h3>\r\n                <ol>\r\n                    <li>The number of values given for mass and percent combined must be greater than or equal to <em>n - 1</em></li>\r\n                </ol>\r\n        \r\n                <aside>\r\n                    <em>n</em> - Number of comonomers given for an individual functional group.\r\n                </aside>\r\n            </section>\r\n        </section>\r\n    );\r\n}","import React, { useState } from 'react';\r\n\r\nexport default function FuncGroupForm()\r\n{\r\n    const func_groups =\r\n    [\r\n        // Functional Group A\r\n        {\r\n            letter: 'A',\r\n            name_placeholder: 'diester',\r\n            num_placeholder: 1,\r\n        },\r\n        // Functional Group B\r\n        {\r\n            letter: 'B',\r\n            name_placeholder: 'diol',\r\n            num_placeholder: 2,\r\n        }\r\n    ];\r\n\r\n    // Starting values for Functional Group Form\r\n    const FUNC_FORM_FIELDS =\r\n    {\r\n        // Functional Group A Form Fields\r\n        funcA_name: '', funcA_num: '', funcA_molar_eq: '',\r\n        // Functional Group B Form Fields\r\n        funcB_name: '', funcB_num: '', funcB_molar_eq: ''\r\n    };\r\n\r\n    const [funcGroupsForm, setFuncGroupsForm] = useState(FUNC_FORM_FIELDS);\r\n\r\n    const handleFormChange = (event) => {\r\n        const { name, value } = event.target;\r\n\r\n        // Update form field to new value\r\n        setFuncGroupsForm({ ...funcGroupsForm, [name]: value });\r\n    }\r\n\r\n    // Functions to increment/decrement monomer number fields\r\n    const subtractMonomerNum = (func_letter) => {\r\n        const num_field_name = `func${func_letter}_num`;\r\n        let current_value = parseInt(funcGroupsForm[num_field_name]);\r\n        \r\n        if (current_value > 1 && current_value % 1 === 0) \r\n        {\r\n            // The current value is a sufficiently large whole number, decrement it\r\n            current_value -= 1;\r\n            setFuncGroupsForm({ ...funcGroupsForm, [num_field_name]: current_value });\r\n        } \r\n        else if (current_value > 2 && current_value % 1 !== 0) \r\n        {\r\n            // The current value is a sufficiently large decimal number, floor and then decrement it\r\n            current_value = Math.floor(current_value);\r\n            current_value -= 1;\r\n            setFuncGroupsForm({ ...funcGroupsForm, [num_field_name]: current_value });\r\n        } \r\n        else if (current_value > 1 && current_value < 2 && current_value % 1 !== 0) \r\n        {\r\n            // The current value is a decimal number between 1 and 2, set it to 1\r\n            current_value = 1;\r\n            setFuncGroupsForm({ ...funcGroupsForm, [num_field_name]: current_value });\r\n        } \r\n        else \r\n        {\r\n            // Set unexpected value to 1\r\n            setFuncGroupsForm({ ...funcGroupsForm, [num_field_name]: 1 });\r\n        }\r\n    }\r\n\r\n    const addMonomerNum = (func_letter) => {\r\n        const num_field_name = `func${func_letter}_num`;\r\n        let current_value = parseInt(funcGroupsForm[num_field_name]);\r\n        \r\n        if (current_value % 1 === 0) \r\n        {\r\n            // The current value is a whole number, increment it\r\n            current_value += 1;\r\n            setFuncGroupsForm({ ...funcGroupsForm, [num_field_name]: current_value });\r\n        } \r\n        else if (current_value % 1 > 0) \r\n        {\r\n            // The current value is a decimal number, floor and then increment it\r\n            current_value = Math.floor(current_value);\r\n            current_value += 1;\r\n            setFuncGroupsForm({ ...funcGroupsForm, [num_field_name]: current_value });\r\n        } \r\n        else \r\n        {\r\n            // Set unexpected value to 1\r\n            setFuncGroupsForm({ ...funcGroupsForm, [num_field_name]: 1 });\r\n        }\r\n    }\r\n\r\n    const toggleCheckBox = (event) => {\r\n        event.preventDefault();\r\n\r\n        const check_box = event.target;\r\n        const molar_eq_section = document.getElementById(\"molar_eq_container\");\r\n\r\n        // Saving and Resetting Current State of Check Box\r\n        const current_state = check_box.classList[1];\r\n        check_box.classList.remove(current_state);\r\n\r\n        // Update checkbox based on current state\r\n        switch(current_state)\r\n        {\r\n            case 'unchecked':\r\n                check_box.classList.add(\"checked\");\r\n                // The checkbox is checked, so the molar eq section should be visible\r\n                molar_eq_section.className = 'visible';\r\n                break;\r\n            case 'checked':\r\n                check_box.classList.add(\"unchecked\");\r\n                // The checkbox is unchecked, so the molar eq section should be hidden\r\n                molar_eq_section.className = 'hidden';\r\n                break;\r\n            default:\r\n                check_box.classList.add(\"unchecked\");\r\n                molar_eq_section.className = 'hidden';\r\n                break;\r\n        }\r\n    }\r\n\r\n    const toggleMolarEQ = (event) => {\r\n        event.preventDefault();\r\n\r\n        const molar_eq_container = event.target.parentElement;\r\n        const molar_eq_status = molar_eq_container.className;\r\n\r\n        // Deselect previous molar equivalents if one has already been selected\r\n        switch(molar_eq_container.id)\r\n        {\r\n            case 'funcA_eq':\r\n                const b_eq = document.getElementById(\"funcB_eq\");\r\n                b_eq.className = 'unselected';\r\n                break;\r\n            case 'funcB_eq': \r\n                const a_eq = document.getElementById(\"funcA_eq\");\r\n                a_eq.className = 'unselected';\r\n                break;\r\n            default:\r\n                console.log('No associated id with this selected element.');\r\n                break;\r\n        }\r\n\r\n        // Update button to reflect new state by changing class name\r\n        switch(molar_eq_status)\r\n        {\r\n            case 'unselected':\r\n                molar_eq_container.className = 'selected';\r\n                break;\r\n\r\n            case 'selected':\r\n                molar_eq_container.className = 'unselected';\r\n                break;\r\n\r\n            default:\r\n                molar_eq_container.className = 'unselected';\r\n                break;\r\n        }\r\n    }\r\n\r\n    const handleFormSubmission = () => {\r\n\r\n    }\r\n\r\n    return(\r\n        <div className=\"form_container\">\r\n            <form id=\"initial_data_entry\">\r\n                <section className=\"percent_type\">\r\n                    <label>\r\n                        Weight %\r\n                        <input type=\"radio\" name=\"proportion\" value=\"wpercent\" id=\"wpercent\" className=\"input_field\" defaultChecked={true} />\r\n                    </label>\r\n                    <label>\r\n                        Mole %\r\n                        <input type=\"radio\" name=\"proportion\" value=\"mpercent\" id=\"mpercent\" className=\"input_field\" />\r\n                    </label>\r\n                </section>\r\n                <section className=\"ag_box\">\r\n                    {func_groups.map(({ letter, name_placeholder, num_placeholder }) =>\r\n                        <div key={`func_group_${letter}`}>\r\n                            <h1>Functional Group {letter}</h1>\r\n                            <div className=\"input_block\">\r\n                                <label>\r\n                                    Substituent Name\r\n                                    <input \r\n                                        type=\"text\" \r\n                                        name={`func${letter}_name`} \r\n                                        value={funcGroupsForm[`func${letter}_name`]} \r\n                                        onChange={handleFormChange}\r\n                                        placeholder={`e.g. '${name_placeholder}'`} \r\n                                        id={`func${letter}_name`} \r\n                                        className=\"input_field string\" \r\n                                    />\r\n                                </label>\r\n                            </div>\r\n                            <br />\r\n                            <div className=\"input_block\">\r\n                                <label>\r\n                                    Number of Comonomers\r\n                                    <input \r\n                                        type=\"text\" \r\n                                        name={`func${letter}_num`} \r\n                                        value={funcGroupsForm[`func${letter}_num`]} \r\n                                        onChange={handleFormChange}\r\n                                        placeholder={`e.g. '${num_placeholder}'`} \r\n                                        id={`func${letter}_num`} \r\n                                        className=\"input_field int\" \r\n                                    />\r\n                                </label>\r\n                                <button \r\n                                    type=\"button\" name=\"minus\" \r\n                                    onClick={() => subtractMonomerNum(letter)} \r\n                                    className=\"square_button plus_minus\" tabIndex=\"-1\"\r\n                                >\r\n                                    <div>-</div>\r\n                                </button>\r\n                                <button \r\n                                    type=\"button\" name=\"plus\" \r\n                                    onClick={() => addMonomerNum(letter)} \r\n                                    className=\"square_button plus_minus\" tabIndex=\"-1\"\r\n                                >\r\n                                    <div>+</div>\r\n                                </button>\r\n                            </div>\r\n                            <br />\r\n                        </div>\r\n                    )}\r\n                </section>\r\n                <br />\r\n                <section className=\"optional\">\r\n                    <div className=\"input_block\">\r\n                        <label>\r\n                            Is either group in excess?\r\n                            <button \r\n                                type=\"button\" name=\"molar_eq_check\" \r\n                                id=\"molar_eq_check\"\r\n                                onClick={toggleCheckBox}\r\n                                className=\"check_box unchecked\" tabIndex=\"-1\"\r\n                            ></button>\r\n                        </label>\r\n                    </div>\r\n                    <br />\r\n                    <div id=\"molar_eq_container\" className=\"hidden\">\r\n                        <div className=\"input_block\">\r\n                            {func_groups.map(({ letter }) =>\r\n                                <div className=\"unselected\" id={`func${letter}_eq`} key={`func${letter}_eq`} >\r\n                                    <button \r\n                                        type=\"button\" \r\n                                        name={`xs_${letter}`} \r\n                                        onClick={toggleMolarEQ} \r\n                                        className=\"square_button inactive_button\"\r\n                                    >\r\n                                        {letter}\r\n                                    </button>\r\n                                </div>\r\n                            )}\r\n                            <label>\r\n                                Molar Equivalents\r\n                                <input type=\"text\" name=\"func_xs\" placeholder=\"e.g. '1.1'\" id=\"func_xs\" className=\"input_field float\" />\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                \r\n                <div className=\"submit_container\">\r\n                    <button type=\"button\" onClick={() => handleFormSubmission()} id=\"initial_submit\" className=\"submit_button\">Next</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}","import '../assets/main_style.css';\r\nimport WelcomeBanner from '../components/WelcomeBanner';\r\nimport FuncGroupForm from '../components/forms/FuncGroupForm';\r\n\r\nexport default function Main()\r\n{\r\n    return(\r\n        <main>\r\n            <WelcomeBanner />\r\n            <FuncGroupForm />\r\n        </main>\r\n    )\r\n}","import Main from './pages/Main';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Main />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n"],"sourceRoot":""}